---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import TopLayout from "@layouts/TopLayout.astro";
import BottomLayout from "@layouts/BottomLayout.astro";
import ArticleTopLayout from "@layouts/ArticleTopLayout.astro";
import ArticleBottomLayout from "@layouts/ArticleBottomLayout.astro";
import Blog from "@components/Blog";
import Pagination from "@components/Pagination.astro";
import { BLOG } from "@consts";

const POSTS_PER_PAGE = 10;

export async function getStaticPaths() {
  const allPosts = (await getCollection("blog")).filter(
    (post) => !post.data.draft,
  );
  const POSTS_PER_PAGE = 10;
  const totalPages = Math.ceil(allPosts.length / POSTS_PER_PAGE);
  const pagePaths = Array.from({ length: totalPages }, (_, i) => ({
    params: { slug: `page/${i + 1}` },
  }));
  const postPaths = allPosts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));

  return [...pagePaths, ...postPaths];
}


const { slug } = Astro.params;

let post;
let posts;
let tags;
let currentPage;
let totalPages;

// Determine if it's a paginated page
const pageMatch = slug.match(/^page\/(\d+)$/);
if (pageMatch) {
  currentPage = parseInt(pageMatch[1], 10);

  const allPosts = (await getCollection("blog"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

  tags = [...new Set(allPosts.flatMap((post) => post.data.tags))].sort((a, b) =>
    a.localeCompare(b),
  );

  const totalPosts = allPosts.length;
  totalPages = Math.ceil(totalPosts / POSTS_PER_PAGE);

  posts = allPosts.slice(
    (currentPage - 1) * POSTS_PER_PAGE,
    currentPage * POSTS_PER_PAGE,
  );
} else {
  // Single post
  const allPosts = await getCollection("blog");
  post = allPosts.find((p) => p.slug === slug);

  if (!post) {
    throw new Error(`Post not found: ${slug}`);
  }
}
---

{
  pageMatch ? (
    <PageLayout title={BLOG.TITLE} description={BLOG.DESCRIPTION}>
      <TopLayout>
        <div class="text-xl md:text-2xl lg:text-3xl text-center animate page-heading">
          {BLOG.TITLE}
        </div>
      </TopLayout>
      <BottomLayout>
        <div class="animate">
          <Blog client:load tags={tags} data={posts} />
          <Pagination currentPage={currentPage} totalPages={totalPages} />
        </div>
      </BottomLayout>
    </PageLayout>
  ) : (
    <PageLayout title={post.data.title} description={post.data.summary}>
      <TopLayout>
        <div class="animate">
          <ArticleTopLayout entry={post} />
        </div>
      </TopLayout>
      <BottomLayout>
        <div class="animate">
          <ArticleBottomLayout entry={post} />
        </div>
      </BottomLayout>
    </PageLayout>
  )
}
